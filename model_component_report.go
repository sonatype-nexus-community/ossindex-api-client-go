/*
Sonatype OSS Index

This documents the available APIs into [Sonatype OSS Index](https://ossindex.sonatype.org/) - API Version: 1-SNAPSHOT (be72c8343baab38a8c598d28dafc78003dce81db).

API version: 2024.323
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ossindex

import (
	"encoding/json"
)

// checks if the ComponentReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComponentReport{}

// ComponentReport Component vulnerability report
type ComponentReport struct {
	// Component coordinates as package-url
	Coordinates *string `json:"coordinates,omitempty"`
	// Component description
	Description *string `json:"description,omitempty"`
	// Component details reference
	Reference *string `json:"reference,omitempty"`
	// Vulnerabilities recorded for component
	Vulnerabilities []ComponentReportVulnerability `json:"vulnerabilities,omitempty"`
}

// NewComponentReport instantiates a new ComponentReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComponentReport() *ComponentReport {
	this := ComponentReport{}
	return &this
}

// NewComponentReportWithDefaults instantiates a new ComponentReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComponentReportWithDefaults() *ComponentReport {
	this := ComponentReport{}
	return &this
}

// GetCoordinates returns the Coordinates field value if set, zero value otherwise.
func (o *ComponentReport) GetCoordinates() string {
	if o == nil || IsNil(o.Coordinates) {
		var ret string
		return ret
	}
	return *o.Coordinates
}

// GetCoordinatesOk returns a tuple with the Coordinates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentReport) GetCoordinatesOk() (*string, bool) {
	if o == nil || IsNil(o.Coordinates) {
		return nil, false
	}
	return o.Coordinates, true
}

// HasCoordinates returns a boolean if a field has been set.
func (o *ComponentReport) HasCoordinates() bool {
	if o != nil && !IsNil(o.Coordinates) {
		return true
	}

	return false
}

// SetCoordinates gets a reference to the given string and assigns it to the Coordinates field.
func (o *ComponentReport) SetCoordinates(v string) {
	o.Coordinates = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ComponentReport) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentReport) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ComponentReport) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ComponentReport) SetDescription(v string) {
	o.Description = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *ComponentReport) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentReport) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *ComponentReport) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *ComponentReport) SetReference(v string) {
	o.Reference = &v
}

// GetVulnerabilities returns the Vulnerabilities field value if set, zero value otherwise.
func (o *ComponentReport) GetVulnerabilities() []ComponentReportVulnerability {
	if o == nil || IsNil(o.Vulnerabilities) {
		var ret []ComponentReportVulnerability
		return ret
	}
	return o.Vulnerabilities
}

// GetVulnerabilitiesOk returns a tuple with the Vulnerabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentReport) GetVulnerabilitiesOk() ([]ComponentReportVulnerability, bool) {
	if o == nil || IsNil(o.Vulnerabilities) {
		return nil, false
	}
	return o.Vulnerabilities, true
}

// HasVulnerabilities returns a boolean if a field has been set.
func (o *ComponentReport) HasVulnerabilities() bool {
	if o != nil && !IsNil(o.Vulnerabilities) {
		return true
	}

	return false
}

// SetVulnerabilities gets a reference to the given []ComponentReportVulnerability and assigns it to the Vulnerabilities field.
func (o *ComponentReport) SetVulnerabilities(v []ComponentReportVulnerability) {
	o.Vulnerabilities = v
}

func (o ComponentReport) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComponentReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Coordinates) {
		toSerialize["coordinates"] = o.Coordinates
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	if !IsNil(o.Vulnerabilities) {
		toSerialize["vulnerabilities"] = o.Vulnerabilities
	}
	return toSerialize, nil
}

type NullableComponentReport struct {
	value *ComponentReport
	isSet bool
}

func (v NullableComponentReport) Get() *ComponentReport {
	return v.value
}

func (v *NullableComponentReport) Set(val *ComponentReport) {
	v.value = val
	v.isSet = true
}

func (v NullableComponentReport) IsSet() bool {
	return v.isSet
}

func (v *NullableComponentReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComponentReport(val *ComponentReport) *NullableComponentReport {
	return &NullableComponentReport{value: val, isSet: true}
}

func (v NullableComponentReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComponentReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


